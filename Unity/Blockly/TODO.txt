<<<<<<< HEAD
[logs at bottom of file are most recent]

=======
>>>>>>> move towards dragging modules from library
- continue module dragging UI in BlocklyModuleUIController (look at line 68)
- get debug logs in the quest working (follow this video: https://www.youtube.com/watch?v=AtOX6bXcQJE)
  - first see if we can use the hand pointer as an OVRCursor
  - then try the hand-interaction-train-scene approach where you have proximity
    zones, so the cursor snaps to different UI elements
- figure out how to integrate pinch and pointer poses from OVR (https://developer.oculus.com/documentation/unity/unity-handtracking/?locale=en_US#getting-skeleton-mesh-data)
- make sure to leave EmacsClient.cs untracked or detect some env variable to enable it (just something clever)

YOU LEFT OFF TRYING TO GET VALID AREA MODULE DROPOFF CHECKING WORKING

changing script execution order for the ovr stuff breaks shit

it seems like the ray tool is locked to the origin

see why pose recognition isn't triggering with the pinch and ray tool stuff integrated

continue inspecting the loaded pose data from the pointer poses you made
for the left and right hands (maybe there's an easy way to deep print structs).
then try saving more poses and patching pose recognition to work.
  maybe make a pose recognition testing scene that uses a custom hand prefab to
apply pose data to it that's been loaded from the serialized pose `.dat` files

data seems good. let's modify erik's code, so we can batch-collect gestures.
actually, no. we should just get one more pose, then patch pose rec.

weird. poses that are loaded in at runtime don't have null bone rotations, but
static ones do.

figure out why the module mesh's position is behind the module library
rack, instead of on top of it. might be because the children aren't centered at
the origin. but then why does unity show the translation tool for the module
mesh's parent object show a position that's very close to the positions of the
children objects. like... you'd expect all of the children to be -15 away from
the parent object if they have x=-15.
does the inspector show relative or absolute positions?
do we need to add another level of parent game objects to facilitate the scaling?
because maybe the scaling is messing up the translation space.

TODO reset valid play area collider once you make the play area smaller

current TODOs:
- [x] make module library less hard-coded (don't preallocate lib modules, but rather instantiate them as needed)
  - [x] have them instantiated as needed
  - [x] make sure the dynamic instantiation works on the quest (creating new interactables fucking sucks)
  - [x] dynamically create shelves
    - don't need to dynamically create them. just statically have multiple shelves that get populated with modules
- [x] figure out why lib module script is getting null pointers in StartStopStateChanged
- [x] make sure create module gesture works
- make point pose recognition disregard thumb rotations
- make play area smaller (and put on pedestal)
- get a demo of a client sending a serialized transform to the server and having the server update a mirror object's transform (continue on ~/Downloads/TCPServerAndClient)
  - proof that you can do it on the Quest with what's in ~/Downloads/TCPServerAndClient: https://www.youtube.com/watch?v=DV-o4TY5S70
